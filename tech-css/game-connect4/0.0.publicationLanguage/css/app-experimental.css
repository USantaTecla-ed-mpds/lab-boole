/***
 *             Connect4 stylesheet
 *      _____                       __  ____
 *     / ___/__  ___  ___  ___ ____/ /_/ / /
 *    / /__/ _ \/ _ \/ _ \/ -_) __/ __/_  _/
 *    \___/\___/_//_/_//_/\__/\__/\__/ /_/  
 *
 *    CSS architecture based in BEMIT methodology,
 *    implemented using cascade layers, open-props and custom reset
 *
 *    See: https://cssguidelin.es/
 *         https://open-props.style/
 *         https://www.joshwcomeau.com/css/custom-css-reset/
 */


/*-----------------------------------------------------------------------------*\
  # LAYERS ORDER
    From lowest to highest priority in cascade. Don't change order!
\*-----------------------------------------------------------------------------*/

@layer settings, settings.open-props, reset, elements, layout, objects, components, utilities;



/*-----------------------------------------------------------------------------*\
  # SETTINGS layer
    only settings like: variables, fonts, colors, breakpoints...
\*-----------------------------------------------------------------------------*/

@import url('https://unpkg.com/open-props') layer(settings.open-props);
@layer settings {
  :root {
    --font-size-base: 10px;
    --gradient-board: linear-gradient(var(--blue-3), var(--blue-5));
  }
}



/*-----------------------------------------------------------------------------*\
  # RESET layer
    reset and normalize default browser styles
\*-----------------------------------------------------------------------------*/

@layer reset {
  /*
    1. Use a more-intuitive box-sizing model.
  */
  *, *::before, *::after {
    box-sizing: border-box;
  }
  /*
    2. Remove default margin
  */
  * {
    margin: 0;
  }
  /*
    3. Allow percentage-based heights in the application
  */
  html, body {
    height: 100%;
  }
  /*
    Typographic tweaks!
    4. Add accessible line-height
    5. Improve text rendering
  */
  body {
    line-height: 1.4;
    -webkit-font-smoothing: antialiased;
  }
  /*
    6. Improve media defaults
  */
  img, picture, video, canvas, svg {
    display: block;
    max-width: 100%;
  }
  /*
    7. Remove built-in form typography styles
  */
  input, button, textarea, select {
    font: revert;
  }
  /*
    8. Avoid text overflows
  */
  p, h1, h2, h3, h4, h5, h6 {
    overflow-wrap: break-word;
  }
  /*
    9. Create a root stacking context
  */
  #root, #__next {
    isolation: isolate;
  }

  /*
    10. Remove default padding
  */
  ul, ol, li  {
    padding: 0;
  }

}



/*-----------------------------------------------------------------------------*\
  # ELEMENTS layer
    html tags like: headings, p, ul, button...
\*-----------------------------------------------------------------------------*/

@layer elements {
  html {
    font-family: var(--font-sans);
    font-size: var(--font-size-base);
  }
  
  body {
    position: relative;
    display: block;
    width: 100vw;
    height: 100vh;
    font-size: 1.6rem;
    background: radial-gradient(84.79% 50.97% at 50% 85%, rgba(26, 18, 7, 0.96) 0%, #2D353C 100%);
  }

  button {
    padding: .9rem 1.2rem .9rem 1rem;
    border: 1px solid var(--blue-7);
    border-radius: var(--radius-2);

}



/*-----------------------------------------------------------------------------*\
  # LAYOUT layer
    layout objects like: containers, wrappers, rows, columns...
\*-----------------------------------------------------------------------------*/

@layer layout {
  .app {
    position: relative;
    display: flex;
    flex-direction: column;
    justify-content: space-between;
    width: 100vw;
    height: 100vh;
    overflow: hidden;
  }

  .d-flex {
    display: flex;
  }
  .flex-column {
    flex-direction: column;
  }
  .align-items-center {
    align-items: center;
  }
  .justify-content-center {
    justify-content: center;
  }
  .justify-content-space-between {
    justify-content: space-between;
  }

  .w-28p {
    width: 28%;
  }
  .w-30p {
    width: 30%;
  }

  .col-3 {
    width: 25%;
  }
  .col-4 {
    width: 33.33%;
  }
  .col-8 {
    width: 66.66%;
  }
  .col-9 {
    width: 75%;
  }
  .col-12 {
    width: 100%;
  }

  .p-1 {
    padding: 1rem;
  }
  .p-1-5 {
    padding: 1.5rem;
  }
  .p-2 {
    padding: 2rem;
  }
  .pl-2 {
    padding-left: 2rem;
  }
  .pl-3 {
    padding-left: 3rem;
  }

  .mb-1 {
    margin-bottom: 1rem;
  }

}



/*-----------------------------------------------------------------------------*\
  # OBJECTS layer
    simple reusable patterns that components may inherit,
    like: title, subtitle, icon, link
\*-----------------------------------------------------------------------------*/

@layer objects {

  .header__logo {
    font-size: var(--font-size-6);
    font-weight: var(--font-weight-7);
    color: var(--blue-0);
  }

  .header__logo__span {
    color: var(--blue-3);
    padding-left: var(--size-1);
  }

  .color--white {
    color: #fff;
  }

  .color--gray-5 {
    color: var(--gray-5);
  }

  .text--small {
    font-size: var(--font-size-0);
  }

  .button__txt {
    padding-top: .1rem;
  }

  .button__icon {
    flex: 0 0 auto;
    height: 1.8rem;
  }

  .timer__pause-btn__icon {
    height: 2.4rem;
  }

  .button__icon--mr {
    margin-right: .5em;
  }

  .button__icon--ml {
    margin-left: .5em;
  }

  .board__input {
    position: absolute;
    opacity: 0;
    visibility: hidden;
    clip-path: polygon(0 0);
  }

  .board__checker {
    position: relative;
    background-color: var(--gray-8);
    flex: 1 1 auto;
    height: 100%;
    aspect-ratio: 1;
    border-radius: 1000px;
    box-shadow: inset 0 2px 10px 0 hsla(0, 0%, 0%, .7), 0 1px 1px 1px hsla(0, 100%, 100%, .3);
  }

  .board__input:checked ~ .board__checker {
    background-color: var(--yellow-4);
    box-shadow: inset 0 1px 4px 0 hsla(40, 20%, 20%, .5), inset 0 0 0 3px hsla(40, 50%, 100%, .3), 0 1px 1px 1px hsla(0, 100%, 100%, .2);
  }
  .has-yellow :checked ~ .board__checker {
    background-color: var(--yellow-4);
    box-shadow: inset 0 1px 4px 0 hsla(40, 20%, 20%, .5), inset 0 0 0 3px hsla(40, 50%, 100%, .3), 0 1px 1px 1px hsla(0, 100%, 100%, .2);
  }
  .has-red :checked ~ .board__checker {
    background-color: var(--red-7);
    box-shadow: inset 0 1px 4px 0 hsla(10, 90%, 20%, .5), inset 0 0 0 3px hsla(0, 0%, 0%, .07), 0 1px 1px 1px hsla(0, 100%, 100%, .2);
  }

  .players__header--turn {
    margin-bottom: 12vh;
    font-size: var(--font-size-4);
    font-weight: normal;
    text-transform: uppercase;
    letter-spacing: var(--size-1);
    color: var(--blue-1);
  }

  .player__checker {
    width: 40%;
    max-width: 7rem;
    height: auto;
    aspect-ratio: 1;
    border-radius: 100px;
    font-size: var(--font-size-5);
    font-size: clamp(.6rem, 5vmin, 2rem);
    font-weight: lighter;
    box-shadow: inset 0 0 0 3px hsla(0, 0%, 0%, .05);
  }
  .player__has-turn .player__checker {
    transform: scale(1.2);
    transform-origin: bottom;
  }
  
  .player--yellow {
    background-color: var(--yellow-4);
  }
  .player--red {
    background-color: var(--red-7);
  }

  .player__name {
    font-size: var(--font-size-4);
    font-weight: var(--font-weight-7);
    letter-spacing: .02em;
  }
  .player__id {
    font-size: var(--font-size-2);
    text-transform: uppercase;
    letter-spacing: var(--size-1);
    opacity: .5;
  }

}



/*-----------------------------------------------------------------------------*\
  # COMPONENTS layer
    reusable visual components like: button, input, select, product...
    naming based on visual appearance, not on function or content of the component
\*-----------------------------------------------------------------------------*/

@layer components {

  .header {
    padding: 1.5rem 1rem 1rem 2rem;
  }

  .nav {
    padding: 1rem 2rem 1rem 2rem;
    flex: 1 1 auto;
  }

  .nav__list {
    width: 100%;
    display: flex;
    flex-direction: column;
  }

  .nav__item {
    position: relative;
    display: flex;
    width: auto;
    margin-bottom: var(--size-4);
  }

  .button {
    position: relative;
    display: flex;
    align-items: center;
    flex: 0 0 auto;
    color: var(--blue-0);
    background-color: var(--gray-7);
    font-size: var(--font-size-4);
    text-align: left;
  }

  .board__wrapper {
    position: absolute;
    display: flex;
    align-items: center;
    inset: 0;
    width: 100%;
    padding-left: 2rem;
    transform: translateX(26vw);
    background: var(--gradient-board);
    box-shadow: -10px 0 20px 0 hsla(0, 0%, 0%, .4);
    overflow: hidden;
  }

  .board {
    position: relative;
    width: 106vh;
    height: auto;
    max-width: 55vw;
    display: grid;
    grid-template-columns: repeat(7, calc(100%/7));
    grid-template-rows: repeat(6, auto);
  }

  .board__cell {
    position: relative;
    display: flex;
    align-items: center;
    justify-content: center;
    flex: 1 1 auto;
    aspect-ratio: 1;
    padding: 10%;
  }

  .timer__wrapper {
    align-items: stretch;
  }

  .timer {
    padding: .6rem 1.5rem .6rem 2.8rem;
    background-color: var(--gray-7);
    border: 1px solid var(--blue-7);
    border-right: none;
  }

  .timer__time {
    font-size: 2.2rem;
    line-height: 1.2;
  }

  .timer__pause-btn {
    border-radius: 0 var(--radius-2) var(--radius-2) 0;
    min-width: 4.4rem;
  }

  .footer {
    padding: 2rem 2rem 1rem 0;
  }

  .board__players {
    flex: 0 1 20vw;
    color: #fff;
    text-align: center;
  }

  .player {
    margin: 20% 0;
    opacity: .5;
    transition: opacity .2s ease-in-out;
  }

  .player__has-turn {
    opacity: 1;
  }

}



/*-----------------------------------------------------------------------------*\
  # UTILITIES layer
    helper classes for excepcions like: visibility, opacity, alternative color, size, position...
    to override all other properties. The only layer in wich !important is allowed!
\*-----------------------------------------------------------------------------*/

@layer utilities {
  .is-visible {

  }
  
  .is-hidden {

  }
}



/*-----------------------------------------------------------------------------*\
  # CLASS PARADISE
    Classes here have the highest specificity coefficient and cascading priority.
    Use with caution!
\*-----------------------------------------------------------------------------*/

/* nothing yet */




/*-----------------------------------------------------------------------------*\
  # NAMING CONVENTIONS & GOOD PRACTICES
\*-----------------------------------------------------------------------------*/
/*
  # BEM naming:
      .block { }
      .block__element { }  (element as child part of a block. Like: nav__button, header__logo, top, bottom...)
      .block__element--modifier { }  (modifier as state or attribute of a block. Like: red, visible, small...)

  # BEMIT namespaces:
    Same as BEM, plus adding the initial of layer.
      .l-[name] { }  for layout
      .o-[name] { }  for objects
      .c-[name] { }  for components
      .u-[name] { }  for utilities

  # ID's and Classes for use with Javascript
      .js-[name] { }

  # State classes
      .is-[name] { }
      .has-[name] { }

  # Use expressive and descriptive class names.
  # Don't write selectors with nested classes, if possible.
  # Follow naming conventions.
  # Don't use important!
  # Don't write outside the layers.
  # Don't change the order of the layers.
  # DRY: Don't repeat yourself.
*/




/* End of file app.css */
/* Don't write anything below this line */