@startuml klondike--instructions

skinparam handwritten true
skinparam nodesep 60
' skinparam ranksep 70
!theme mars

title Klondike Instructions \n

state GamePrepared
state _CheckPossibleMovement <<choice>>
state _CheckMoveToFoundation <<choice>>
state _CheckMoveToTableau <<choice>>
state _CheckRaiseInTableau <<choice>>
state _CheckRaiseCardFromStock <<choice>>
state _CheckFoundationComplete <<choice>>
state _DoRaiseCardFromStock <<choice>>
state CardMovedToFoundation
state CardMovedToTableau
state CardMovedToWaste
state CardRaisedInTableau
state StockRecovered
state FoundationComplete


[*]                         -r-> GamePrepared : shuffle deck \n / put cards to tableaus \n / put rest to stock pile
GamePrepared                --> _CheckPossibleMovement : start game
_CheckPossibleMovement      -[#green,bold]-> _CheckMoveToFoundation : check movement \n to foundation
_CheckMoveToFoundation      --> CardMovedToFoundation : [ if card can be \n moved to foundation ] \n / move card
CardMovedToFoundation       --> _CheckFoundationComplete : check if \n foundation is \n complete
_CheckFoundationComplete    ---> FoundationComplete : [ if foundation \n is complete ]
_CheckFoundationComplete    --> _CheckPossibleMovement : [ else ]
_CheckMoveToFoundation      --> _CheckMoveToTableau : [ else ] \n / check movement \n to tableau
_CheckMoveToTableau         --> CardMovedToTableau : [ if card can be \n moved to tableau ] \n / move card
CardMovedToTableau          --> _CheckRaiseInTableau : check if \n card can be \n raised in tableau
_CheckRaiseInTableau        --> CardRaisedInTableau : [ if card can be \n raised in tableau ] \n / raise card
_CheckRaiseInTableau        --> _CheckPossibleMovement : [ else ]
CardRaisedInTableau         --> _CheckPossibleMovement
_CheckMoveToTableau         ---> _CheckRaiseCardFromStock : [ else ] \n / check if \n card can be \n raised from \n stock
_CheckRaiseCardFromStock    -r-> _DoRaiseCardFromStock : [ if card can be \n raised from stock ]
_CheckRaiseCardFromStock    --> StockRecovered : [ else ] \n / recover stock
StockRecovered              --> _DoRaiseCardFromStock
_DoRaiseCardFromStock       --> CardMovedToWaste : raise card \n / move card to waste
CardMovedToWaste            --> _CheckPossibleMovement
FoundationComplete          -[#green,bold]--> [*] : win the game


@enduml